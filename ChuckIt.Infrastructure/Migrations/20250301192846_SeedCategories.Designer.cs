// <auto-generated />
using System;
using ChuckItApiV2.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChuckIt.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301192846_SeedCategories")]
    partial class SeedCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Category.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundColor = "#fc5c65",
                            Color = "white",
                            Icon = "floor-lamp",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 2,
                            BackgroundColor = "#fd9644",
                            Color = "white",
                            Icon = "car",
                            Name = "Cars"
                        },
                        new
                        {
                            Id = 3,
                            BackgroundColor = "#fed330",
                            Color = "white",
                            Icon = "camera",
                            Name = "Cameras"
                        },
                        new
                        {
                            Id = 4,
                            BackgroundColor = "#26de81",
                            Color = "white",
                            Icon = "cards",
                            Name = "Games"
                        },
                        new
                        {
                            Id = 5,
                            BackgroundColor = "#2bcbba",
                            Color = "white",
                            Icon = "shoe-heel",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 6,
                            BackgroundColor = "#45aaf2",
                            Color = "white",
                            Icon = "basketball",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            BackgroundColor = "#4b7bec",
                            Color = "white",
                            Icon = "headphones",
                            Name = "Movies & Music"
                        },
                        new
                        {
                            Id = 8,
                            BackgroundColor = "#a55eea",
                            Color = "white",
                            Icon = "book-open-variant",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 9,
                            BackgroundColor = "#778ca3",
                            Color = "white",
                            Icon = "application",
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Listings.Images", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Listings.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Messages.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Listings.Images", b =>
                {
                    b.HasOne("ChuckItApiV2.Core.Entities.Listings.Listing", "Listing")
                        .WithMany("Images")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Listings.Listing", b =>
                {
                    b.HasOne("ChuckItApiV2.Core.Entities.Category.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuckItApiV2.Core.Entities.Users.User", "User")
                        .WithMany("Listings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Messages.Message", b =>
                {
                    b.HasOne("ChuckItApiV2.Core.Entities.Listings.Listing", "Listings")
                        .WithMany("Messages")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChuckItApiV2.Core.Entities.Users.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listings");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Listings.Listing", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChuckItApiV2.Core.Entities.Users.User", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
